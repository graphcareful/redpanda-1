/*
 * Copyright 2020 Vectorized, Inc.
 *
 * Use of this software is governed by the Business Source License
 * included in the file licenses/BSL.md
 *
 * As of the Change Date specified in that file, in accordance with
 * the Business Source License, use of this software will be governed
 * by the Apache License, Version 2.0
 */

#pragma once

#include "coproc/errc.h"
#include "coproc/exception.h"
#include "coproc/ntp_context.h"
#include "coproc/supervisor.h"
#include "coproc/types.h"
#include "random/simple_time_jitter.h"
#include "utils/mutex.h"

#include <seastar/core/abort_source.hh>
#include <seastar/core/semaphore.hh>
#include <seastar/core/shared_ptr.hh>

namespace coproc {
/**
 * Expect this type of exception if there are promises queued waiting on the
 * fiber to reach an idle state, but shutdown is called before that occurs
 */
class stranded_update_exception final : public exception {
    using exception::exception;
};

/**
 * The script_context is the smallest schedulable unit in the coprocessor
 * framework. One context is created per registered coprocessor script,
 * representing one fiber.
 *
 * Important to note is the level of concurrency provided. Within a
 * script_context there is one fiber for which scheduled asynchronous work is
 * performed in sync, meaning that for each read -> send -> write that occurs
 * within the run loop, those actions will occur in order.
 *
 * Since each script_context has one of these fibers of its own, no one context
 * will wait for work to be finished by another in order to continue making
 * progress. They all operate independently of eachother.
 */
class script_context {
public:
    /**
     * class constructor
     * @param script_id Uniquely identifyable id
     * @param ctx Shared state, shared across all script_contexts on a shard
     * @param ntp_ctxs Map of interested ntps, strongly retained by 'this'
     **/
    explicit script_context(
      script_id, shared_script_resources&, ntp_context_cache&&);

    script_context(const script_context&) = delete;
    script_context(script_context&&) = delete;
    script_context& operator=(script_context&&) = delete;
    script_context& operator=(const script_context&) = delete;

    ~script_context() noexcept = default;

    /// Startups up a single managed fiber responsible for maintaining the pace
    /// of the run loop.
    /// Returns a future which returns when the script fiber
    /// has completed or throws \ref script_failed_exception
    ss::future<> start();

    /**
     * Stop the single managed fiber started by 'start()'.
     * @returns a future that resolves when the fiber stops and all resources
     * held by this context are relinquished
     */
    ss::future<> shutdown();

    /**
     * Start ingestion on the interested ntp.
     * Useful for the cases where a partition was moved or updated.
     *
     * @returns Future that resolves when the is ready to be used in an
     * an uncoming request
     */
    ss::future<errc>
      start_processing_ntp(model::ntp, ss::lw_shared_ptr<ntp_context>);

    /**
     * Stop ingestion on the interested ntp.
     * Useful for the cases where a partition is to be moved or updated.
     *
     * @returns Future that resolves when the ntp will no longer be used for a
     * read or in progress request
     */
    ss::future<errc> stop_processing_ntp(model::ntp);

private:
    ss::future<> do_execute();

    ss::future<> process_reply(process_batch_reply);

    ss::future<ss::stop_iteration> process_send_write(rpc::transport*);

    void process_pending_updates();

private:
    /// State to track in-progress ntp modifications
    struct input_update {
        enum class modification_type { insert, remove };
        modification_type action;
        ss::lw_shared_ptr<ntp_context> ctx;
        ss::promise<errc> p;
    };
    absl::node_hash_map<model::ntp, input_update> _updates;

    /// Killswitch for in-process reads
    ss::abort_source _abort_source;

    /// Manages async fiber that begins when calling 'start()'
    ss::gate _gate;

    // Reference to resources shared across all script_contexts on 'this'
    // shard
    shared_script_resources& _resources;

    /// References to input topics that this script is interested in
    /// receiving updates for
    ntp_context_cache _ntp_ctxs;

    /// Uniquely identifying script id. Generated by coproc engine
    script_id _id;
};
} // namespace coproc
